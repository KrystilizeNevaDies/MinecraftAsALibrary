/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.foc.minecraftasalibrary;

import net.fabricmc.tinyremapper.NonClassCopyMode;
import net.fabricmc.tinyremapper.OutputConsumerPath;
import net.fabricmc.tinyremapper.TinyRemapper;
import net.fabricmc.tinyremapper.TinyUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;

public class Main {
    public static final String MCVersion = "1.19.2";
    public static final String MappingsURL = "https://maven.quiltmc.org/repository/release/org/quiltmc/quilt-mappings/1.19.2+build.14/quilt-mappings-1.19.2+build.14-tiny.gz";
    public static final Path MappingsFile = Path.of(MCVersion+".mappings.tiny.gz");
    public static final Path serverJar = Path.of("minecraft."+MCVersion+".official.jar");
    public static final Path remappedJar = Path.of("minecraft."+MCVersion+".remapped.jar");

    public static void main(String[] args) throws IOException {
        if (!Files.exists(remappedJar)) {
            final JSONObject mcMeta = new JSONObject(readStringFromURL("https://launchermeta.mojang.com/mc/game/version_manifest.json"));
            final JSONArray mcVersions = mcMeta.getJSONArray("versions");

            String MCURl = null;

            for (int i = 0; i < mcVersions.length(); i++) {
                JSONObject version = mcVersions.getJSONObject(i);
                if (version.getString("id").equals(MCVersion)) {
                    JSONObject data = new JSONObject(readStringFromURL(version.getString("url")));
                    MCURl = data.getJSONObject("downloads").getJSONObject("server").getString("url");
                    break;
                }
            }

            if (MCURl == null) {
                throw new RuntimeException("The MC version you requested isn't here!");
            }

            System.out.println("Downloading the official Minecraft server jar...");

            downloadToFile(MCURl, serverJar.toString());

            System.out.println("Downloading the QuiltMC mappings...");

            downloadToFile(MappingsURL, MappingsFile.toString());

            System.out.println("Remapping server jar...");
            Path[] classpath = new Path[0];

            TinyRemapper remapper = TinyRemapper.newRemapper()
                    .withMappings(TinyUtils.createTinyMappingProvider(MappingsFile, "official", "named"))
                    .build();

            try (OutputConsumerPath outputConsumer =
                         new OutputConsumerPath.Builder(remappedJar).build()) {
                outputConsumer.addNonClassFiles(serverJar, NonClassCopyMode.FIX_META_INF, remapper);

                remapper.readInputs(serverJar);
                remapper.readClassPath(classpath);

                remapper.apply(outputConsumer);
            } catch (IOException e) {
                throw new RuntimeException(e);
            } finally {
                remapper.finish();
            }
        } else {
            System.out.println("Found an existing remapped jar! If you want to redownload it, simply delete the file!");
        }
    }

    public static String readStringFromURL(String requestURL) throws IOException {
        try (Scanner scanner = new Scanner(new URL(requestURL).openStream(),
                StandardCharsets.UTF_8)) {
            scanner.useDelimiter("\\A");
            return scanner.hasNext() ? scanner.next() : "";
        }
    }

    static long downloadToFile(String url, String fileName) throws IOException {
        try (InputStream in = URI.create(url).toURL().openStream()) {
            return Files.copy(in, Paths.get(fileName));
        }
    }
}
