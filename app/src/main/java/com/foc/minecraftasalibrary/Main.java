/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.foc.minecraftasalibrary;

import java.io.File;
import java.io.IOException;
import java.net.URLClassLoader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Comparator;

public class Main {
    public static final String MCVersion = "1.19.2";
    public static final String MappingsURL = "https://maven.quiltmc.org/repository/release/org/quiltmc/quilt-mappings/1.19.2+build.14/quilt-mappings-1.19.2+build.14-tiny.gz";
    public static final Path MappingsFile = Path.of(".temp/"+MCVersion+".mappings.tiny.gz");
    public static final Path officialJar = Path.of(".temp/minecraft."+MCVersion+".official.jar");
    public static final Path depsJar = Path.of("minecraft."+MCVersion+".deps.jar");
    public static final Path remappedJar = Path.of("minecraft."+MCVersion+".remapped.jar");

    public static void main(String[] args) throws IOException, ClassNotFoundException {
        System.out.println("Checking if remapped jar exists...");

        if (!Files.exists(remappedJar)) {
            if (!Files.exists(officialJar)) {
                System.out.println("Downloading official Minecraft jar...");
                MinecraftTransformer.downloadMinecraft(MCVersion, officialJar);
            } else {
                System.out.println("The official minecraft jar already exists, skipping download!");
            }

            if (!Files.exists(MappingsFile)) {
                System.out.println("Downloading mappings file from Quilt...");
                MinecraftTransformer.downloadMappings(MappingsURL, MappingsFile);
            } else {
                System.out.println("The mappings file already exists, skipping download!");
            }

            Path unpackedBundle = Path.of(".temp/minecraftBundle");
            if (Files.exists(unpackedBundle)) {
                Files.walk(unpackedBundle)
                        .sorted(Comparator.reverseOrder())
                        .map(Path::toFile)
                        .forEach(File::delete);
            }

            Path unpackedServerJar = Path.of(".temp/minecraftServerJar");
            if (Files.exists(unpackedServerJar)) {
                Files.walk(unpackedServerJar)
                        .sorted(Comparator.reverseOrder())
                        .map(Path::toFile)
                        .forEach(File::delete);
            }

            Path outputtedJars = Path.of(".temp/outputtedjars");
            if (Files.exists(outputtedJars)) {
                Files.walk(outputtedJars)
                        .sorted(Comparator.reverseOrder())
                        .map(Path::toFile)
                        .forEach(File::delete);
            }

            System.out.println("Flattening and remapping jar using Quilt mappings...");
            MinecraftTransformer.flattenAndRemapJar(officialJar, MappingsFile, depsJar, remappedJar);

            System.out.println("Finished all tasks.");
        } else {
            System.out.println("The remapped Minecraft server jar is already present! Delete it and relating files to redownload it!");
        }

        URLClassLoader clsloader = MinecraftTransformer.createClassLoader(ClassLoader.getSystemClassLoader(), remappedJar.toUri().toURL(), depsJar.toUri().toURL());

        Class ItemStack = clsloader.loadClass("net.minecraft.item.ItemStack");

        System.out.println(ItemStack);
    }
}
